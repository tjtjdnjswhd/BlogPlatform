// <auto-generated />
using System;
using BlogPlatform.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogPlatform.EFCore.Migrations
{
    [DbContext(typeof(BlogPlatformDbContext))]
    partial class BlogPlatformDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BlogPlatform.EFCore.Models.BasicAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTimeOffset>("CreatedAt"));

                    b.Property<bool>("IsPasswordChangeRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<byte>("SoftDeleteLevel")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTimeOffset>("SoftDeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SoftDeleteLevel");

                    b.HasIndex("UserId");

                    b.HasIndex("AccountId", "SoftDeletedAt")
                        .IsUnique();

                    b.ToTable("BasicAccounts", t =>
                        {
                            t.HasCheckConstraint("CK_BasicAccounts_SoftDeleteLevel_SoftDeletedAt", "(SoftDeleteLevel = 0 AND SoftDeletedAt = '9999-12-31 23:59:59.999999') OR (SoftDeleteLevel <> 0 AND SoftDeletedAt <> '9999-12-31 23:59:59.999999')");
                        });
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTimeOffset>("CreatedAt"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<byte>("SoftDeleteLevel")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTimeOffset>("SoftDeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SoftDeleteLevel");

                    b.HasIndex("Name", "SoftDeletedAt")
                        .IsUnique();

                    b.HasIndex("UserId", "SoftDeletedAt")
                        .IsUnique();

                    b.ToTable("Blog", t =>
                        {
                            t.HasCheckConstraint("CK_Blog_SoftDeleteLevel_SoftDeletedAt", "(SoftDeleteLevel = 0 AND SoftDeletedAt = '9999-12-31 23:59:59.999999') OR (SoftDeleteLevel <> 0 AND SoftDeletedAt <> '9999-12-31 23:59:59.999999')");
                        });
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTimeOffset>("CreatedAt"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<byte>("SoftDeleteLevel")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTimeOffset>("SoftDeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999), new TimeSpan(0, 0, 0, 0, 0)));

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("SoftDeleteLevel");

                    b.ToTable("Category", t =>
                        {
                            t.HasCheckConstraint("CK_Category_SoftDeleteLevel_SoftDeletedAt", "(SoftDeleteLevel = 0 AND SoftDeletedAt = '9999-12-31 23:59:59.999999') OR (SoftDeleteLevel <> 0 AND SoftDeletedAt <> '9999-12-31 23:59:59.999999')");
                        });
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTimeOffset>("CreatedAt"));

                    b.Property<DateTimeOffset?>("LastUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<byte>("SoftDeleteLevel")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTimeOffset>("SoftDeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("SoftDeleteLevel");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", t =>
                        {
                            t.HasCheckConstraint("CK_Comment_SoftDeleteLevel_SoftDeletedAt", "(SoftDeleteLevel = 0 AND SoftDeletedAt = '9999-12-31 23:59:59.999999') OR (SoftDeleteLevel <> 0 AND SoftDeletedAt <> '9999-12-31 23:59:59.999999')");
                        });
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.OAuthAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTimeOffset>("CreatedAt"));

                    b.Property<string>("NameIdentifier")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<byte>("SoftDeleteLevel")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTimeOffset>("SoftDeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("SoftDeleteLevel");

                    b.HasIndex("UserId");

                    b.HasIndex("NameIdentifier", "ProviderId", "SoftDeletedAt")
                        .IsUnique();

                    b.ToTable("OAuthAccount", t =>
                        {
                            t.HasCheckConstraint("CK_OAuthAccount_SoftDeleteLevel_SoftDeletedAt", "(SoftDeleteLevel = 0 AND SoftDeletedAt = '9999-12-31 23:59:59.999999') OR (SoftDeleteLevel <> 0 AND SoftDeletedAt <> '9999-12-31 23:59:59.999999')");
                        });
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.OAuthProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTimeOffset>("CreatedAt"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<byte>("SoftDeleteLevel")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTimeOffset>("SoftDeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999), new TimeSpan(0, 0, 0, 0, 0)));

                    b.HasKey("Id");

                    b.HasIndex("SoftDeleteLevel");

                    b.HasIndex("Name", "SoftDeletedAt")
                        .IsUnique();

                    b.ToTable("OAuthProvider", t =>
                        {
                            t.HasCheckConstraint("CK_OAuthProvider_SoftDeleteLevel_SoftDeletedAt", "(SoftDeleteLevel = 0 AND SoftDeletedAt = '9999-12-31 23:59:59.999999') OR (SoftDeleteLevel <> 0 AND SoftDeletedAt <> '9999-12-31 23:59:59.999999')");
                        });
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTimeOffset>("CreatedAt"));

                    b.Property<DateTimeOffset?>("LastUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<byte>("SoftDeleteLevel")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTimeOffset>("SoftDeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SoftDeleteLevel");

                    b.ToTable("Post", t =>
                        {
                            t.HasCheckConstraint("CK_Post_SoftDeleteLevel_SoftDeletedAt", "(SoftDeleteLevel = 0 AND SoftDeletedAt = '9999-12-31 23:59:59.999999') OR (SoftDeleteLevel <> 0 AND SoftDeletedAt <> '9999-12-31 23:59:59.999999')");
                        });
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTimeOffset>("CreatedAt"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<byte>("SoftDeleteLevel")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTimeOffset>("SoftDeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999), new TimeSpan(0, 0, 0, 0, 0)));

                    b.HasKey("Id");

                    b.HasIndex("SoftDeleteLevel");

                    b.HasIndex("Name", "SoftDeletedAt")
                        .IsUnique();

                    b.HasIndex("Priority", "SoftDeletedAt")
                        .IsUnique();

                    b.ToTable("Role", t =>
                        {
                            t.HasCheckConstraint("CK_Role_SoftDeleteLevel_SoftDeletedAt", "(SoftDeleteLevel = 0 AND SoftDeletedAt = '9999-12-31 23:59:59.999999') OR (SoftDeleteLevel <> 0 AND SoftDeletedAt <> '9999-12-31 23:59:59.999999')");
                        });
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("BanExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTimeOffset>("CreatedAt"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<byte>("SoftDeleteLevel")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTimeOffset>("SoftDeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999), new TimeSpan(0, 0, 0, 0, 0)));

                    b.HasKey("Id");

                    b.HasIndex("SoftDeleteLevel");

                    b.HasIndex("Email", "SoftDeletedAt")
                        .IsUnique();

                    b.HasIndex("Name", "SoftDeletedAt")
                        .IsUnique();

                    b.ToTable("User", t =>
                        {
                            t.HasCheckConstraint("CK_User_SoftDeleteLevel_SoftDeletedAt", "(SoftDeleteLevel = 0 AND SoftDeletedAt = '9999-12-31 23:59:59.999999') OR (SoftDeleteLevel <> 0 AND SoftDeletedAt <> '9999-12-31 23:59:59.999999')");
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.BasicAccount", b =>
                {
                    b.HasOne("BlogPlatform.EFCore.Models.User", "User")
                        .WithMany("BasicAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.Blog", b =>
                {
                    b.HasOne("BlogPlatform.EFCore.Models.User", "User")
                        .WithMany("Blog")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.Category", b =>
                {
                    b.HasOne("BlogPlatform.EFCore.Models.Blog", "Blog")
                        .WithMany("Categories")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.Comment", b =>
                {
                    b.HasOne("BlogPlatform.EFCore.Models.Comment", "ParentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("BlogPlatform.EFCore.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogPlatform.EFCore.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.OAuthAccount", b =>
                {
                    b.HasOne("BlogPlatform.EFCore.Models.OAuthProvider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogPlatform.EFCore.Models.User", "User")
                        .WithMany("OAuthAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.Post", b =>
                {
                    b.HasOne("BlogPlatform.EFCore.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("BlogPlatform.EFCore.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogPlatform.EFCore.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.Blog", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.Comment", b =>
                {
                    b.Navigation("ChildComments");
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BlogPlatform.EFCore.Models.User", b =>
                {
                    b.Navigation("BasicAccounts");

                    b.Navigation("Blog");

                    b.Navigation("Comments");

                    b.Navigation("OAuthAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
