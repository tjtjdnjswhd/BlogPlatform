@page "/identity"
@using BlogPlatform.Api.BrowserTests.Components.Identity
@inject ApiClient ApiClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IOptions<ApiUrls> ApiUrls

<UserInfo />

<section class="border p-3">
    <SetReturnUrl @bind-ReturnUrl="ReturnUrl" />
</section>

<div class="btn-group my-3">
    @{
        foreach (IdentityView view in Enum.GetValues<IdentityView>())
        {
            <input type="radio" id="view-@((int)view)" class="btn-check" name="view" @onclick="() => identityView = view" checked="@(view == IdentityView.Login)" />
            <label class="btn btn-outline-primary" for="view-@((int)view)">@view</label>
        }
    }
</div>

<section class="border p-3">
    @switch (identityView)
    {
        case IdentityView.Login:
            <Login @bind-ReturnUrl="ReturnUrl" QueryStrings="@QueryStrings" />
            break;
        case IdentityView.SignUp:
            <SignUp @bind-ReturnUrl="ReturnUrl" QueryStrings="@QueryStrings" />
            break;
        case IdentityView.Logout:
            <Logout Url="@Urls.Identity.Logout" QueryStrings="@QueryStrings" />
            break;
        case IdentityView.OAuth:
            <AddOAuth Url="@Urls.Identity.OAuthAdd" QueryStrings="@QueryStrings" />
            <hr />
            <RemoveOAuth />
            break;
        case IdentityView.Refresh:
            <Refresh Url="@Urls.Identity.Refresh" QueryStrings="@QueryStrings" />
            break;
        case IdentityView.Change:
            <ChangePassword />
            <hr />
            <ChangeEmail />
            <hr />
            <ChangeName />
            break;
    }
</section>

@code {
    private ApiUrls Urls => ApiUrls.Value;
    private string baseAddress => Urls.BaseAddress;
    private ApiUrls.IdentityUrls IdentityUrls => Urls.Identity;

    private IdentityView _identityView = IdentityView.Login;
    private IdentityView identityView
    {
        get => _identityView;
        set
        {
            StateHasChanged();
            _identityView = value;
        }
    }

    private string? _returnUrl;
    private string? ReturnUrl
    {
        get => _returnUrl;
        set
        {
            StateHasChanged();
            _returnUrl = value;
        }
    }

    private string QueryStrings => string.IsNullOrWhiteSpace(ReturnUrl) ? string.Empty : $"?returnUrl={Uri.EscapeDataString(ReturnUrl)}";
}